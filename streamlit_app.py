import streamlit as st
import pandas as pd

st.set_page_config(page_title="T√≠nh th∆∞·ªüng BIO/BPO", page_icon="üéØ", layout="wide")
st.title("üéØ T√≠nh th∆∞·ªüng BIO / BPO ‚Äì nhi·ªÅu m·ªëc linh ho·∫°t")

st.markdown(
    """
- **M·ªëc th∆∞·ªüng % theo Doanh thu *T·ªîNG (BIO+BPO)*** ‚Üí √°p m·ªëc cho t·ª´ng b√™n.  
- **H·ªá s·ªë theo % chi ph√≠** t√≠nh **ri√™ng t·ª´ng b√™n** (v√≠ d·ª• ‚â•30% ch·ªâ nh·∫≠n 80% ph·∫ßn *doanh s·ªë* n·∫øu c·∫•u h√¨nh nh∆∞ v·∫≠y).  
- **Th∆∞·ªüng t·ªëi ∆∞u chi ph√≠** ch·ªâ t√≠nh khi **% chi ph√≠ c·ªßa ch√≠nh b√™n ƒë√≥ < ng∆∞·ª°ng** (m·∫∑c ƒë·ªãnh 30%).  
- **Chi ph√≠ lu√¥n nh·∫≠p VND**. Doanh thu c√≥ th·ªÉ nh·∫≠p **RM** v√† app t·ª± nh√¢n t·ªâ gi√° sang VND.
"""
)

# ---------- Helpers ----------
def safe_data_editor(df, **kwargs):
    return st.data_editor(df, **kwargs) if hasattr(st, "data_editor") else st.experimental_data_editor(df, **kwargs)

def lookup_rate(total_rev_vnd: float, table_rates: pd.DataFrame) -> float:
    df = table_rates.dropna().sort_values("Min_DT_VND")
    pct = 0.0
    for _, row in df.iterrows():
        try:
            if total_rev_vnd >= float(row["Min_DT_VND"]):
                pct = float(row["Pct_Rate"])
            else:
                break
        except Exception:
            continue
    return pct

def lookup_factor(cost_ratio: float, table_f: pd.DataFrame) -> float:
    df = table_f.dropna().sort_values("Min_CostRatio")
    fac = 0.0
    for _, row in df.iterrows():
        try:
            if cost_ratio >= float(row["Min_CostRatio"]):
                fac = float(row["Factor"])
            else:
                break
        except Exception:
            continue
    return fac

def fmt_vnd(x):
    try:
        return f"{int(round(x)):,.0f} ƒë".replace(",", ".")
    except Exception:
        return x

# ---------- Sidebar config (g·ªçn, d·ªÖ nh√¨n) ----------
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh m·ªëc & ng∆∞·ª°ng")

# D·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho m·ªëc doanh thu & h·ªá s·ªë chi ph√≠
default_rates = pd.DataFrame(
    {"Min_DT_VND": [0, 150_000_000, 300_000_000, 500_000_000, 800_000_000, 1_000_000_000, 2_000_000_000],
     "Pct_Rate":   [0.00, 0.005,      0.01,        0.015,       0.02,        0.025,          0.03]}
)
default_costf = pd.DataFrame(
    {"Min_CostRatio": [0.00, 0.30, 0.32, 0.35],
     "Factor":        [1.00, 0.80, 0.50, 0.00]}
)

edit_mode = st.sidebar.toggle("‚úèÔ∏è Ch·ªânh s·ª≠a m·ªëc n√¢ng cao", value=False)

with st.sidebar.expander("M·ªëc % theo Doanh thu T·ªîNG (VND)", expanded=False):
    if edit_mode and hasattr(st, "data_editor"):
        rates_df = st.data_editor(default_rates, use_container_width=True)
    else:
        pretty = default_rates.copy()
        pretty["Min_DT_VND"] = pretty["Min_DT_VND"].map(lambda x: f"{int(x):,}".replace(",", "."))
        pretty["Pct_Rate"]   = pretty["Pct_Rate"].map(lambda x: f"{x*100:.2f}%")
        st.dataframe(pretty, use_container_width=True, hide_index=True)
        rates_df = default_rates

with st.sidebar.expander("H·ªá s·ªë theo % chi ph√≠ c·ªßa B√äN", expanded=False):
    if edit_mode and hasattr(st, "data_editor"):
        costf_df = st.data_editor(default_costf, use_container_width=True)
    else:
        pretty = default_costf.copy()
        pretty["Min_CostRatio"] = pretty["Min_CostRatio"].map(lambda x: f"{x*100:.2f}%")
        pretty["Factor"]        = pretty["Factor"].map(lambda x: f"{x*100:.0f}%")
        st.dataframe(pretty, use_container_width=True, hide_index=True)
        costf_df = default_costf

elig_threshold = st.sidebar.number_input(
    "Ng∆∞·ª°ng ƒë∆∞·ª£c t√≠nh *t·ªëi ∆∞u chi ph√≠* (v√≠ d·ª• 0.30 = 30%)",
    min_value=0.0, max_value=1.0, value=0.30, step=0.01,
)

st.sidebar.subheader("ƒê∆°n v·ªã nh·∫≠p Doanh thu")
use_rm  = st.sidebar.toggle("Nh·∫≠p DOANH THU b·∫±ng RM (chi ph√≠ lu√¥n VND)", value=True)
rate_vnd = st.sidebar.number_input("T·ªâ gi√° VND/RM", min_value=1, value=5200, step=100)

# ---------- Input form ----------
st.header("üßæ Nh·∫≠p d·ªØ li·ªáu")
cols = st.columns([2, 1.1, 1.1, 1.1, 1.1])
with cols[0]: st.markdown("**T√™n**")
with cols[1]: st.markdown(f"**DT BIO** ({'RM' if use_rm else 'VND'})")
with cols[2]: st.markdown("**Chi ph√≠ BIO (VND)**")
with cols[3]: st.markdown(f"**DT BPO** ({'RM' if use_rm else 'VND'})")
with cols[4]: st.markdown("**Chi ph√≠ BPO (VND)**")

default_rows = 10
rows = []
for i in range(default_rows):
    c = st.columns([2, 1.1, 1.1, 1.1, 1.1])
    name = c[0].text_input(f"T√™n_{i}", value="" if i else "Anh T√πng", label_visibility="collapsed")
    bio_rev = c[1].number_input(f"bio_rev_{i}", min_value=0.0, step=1.0, value=0.0, format="%.0f", label_visibility="collapsed")
    bio_cost = c[2].number_input(f"bio_cost_{i}", min_value=0.0, step=1000.0, value=0.0, format="%.0f", label_visibility="collapsed")
    bpo_rev = c[3].number_input(f"bpo_rev_{i}", min_value=0.0, step=1.0, value=0.0, format="%.0f", label_visibility="collapsed")
    bpo_cost = c[4].number_input(f"bpo_cost_{i}", min_value=0.0, step=1000.0, value=0.0, format="%.0f", label_visibility="collapsed")
    rows.append([name, bio_rev, bio_cost, bpo_rev, bpo_cost])

df_input = pd.DataFrame(rows, columns=["T√™n", "DT_BIO_IN", "CP_BIO_VND", "DT_BPO_IN", "CP_BPO_VND"])

st.divider()
if st.button("üìå T√çNH TH∆Ø·ªûNG"):
    df = df_input.copy()

    # Chuy·ªÉn doanh thu sang VND n·∫øu ƒëang nh·∫≠p RM; CHI PH√ç LU√îN VND
    if use_rm:
        df["DT_BIO_VND"] = df["DT_BIO_IN"] * rate_vnd
        df["DT_BPO_VND"] = df["DT_BPO_IN"] * rate_vnd
    else:
        df["DT_BIO_VND"] = df["DT_BIO_IN"]
        df["DT_BPO_VND"] = df["DT_BPO_IN"]

    results = []
    for _, r in df.iterrows():
        name = str(r["T√™n"]).strip()
        bio_rev_vnd = float(r["DT_BIO_VND"])
        bio_cost_vnd = float(r["CP_BIO_VND"])
        bpo_rev_vnd = float(r["DT_BPO_VND"])
        bpo_cost_vnd = float(r["CP_BPO_VND"])

        # B·ªè d√≤ng tr·ªëng
        if (not name) and (bio_rev_vnd==0 and bpo_rev_vnd==0 and bio_cost_vnd==0 and bpo_cost_vnd==0):
            continue

        total_rev = bio_rev_vnd + bpo_rev_vnd

        # % m·ªëc theo doanh thu t·ªïng
        total_rate = lookup_rate(total_rev, rates_df)

        # % chi ph√≠ ri√™ng t·ª´ng b√™n
        bio_ratio = (bio_cost_vnd / bio_rev_vnd) if bio_rev_vnd else 0.0
        bpo_ratio = (bpo_cost_vnd / bpo_rev_vnd) if bpo_rev_vnd else 0.0

        # H·ªá s·ªë doanh s·ªë theo % chi ph√≠ b√™n
        bio_factor = lookup_factor(bio_ratio, costf_df)
        bpo_factor = lookup_factor(bpo_ratio, costf_df)

        # Th∆∞·ªüng doanh s·ªë
        bonus_sales_bio = bio_rev_vnd * total_rate * bio_factor
        bonus_sales_bpo = bpo_rev_vnd * total_rate * bpo_factor

        # Th∆∞·ªüng t·ªëi ∆∞u chi ph√≠ ‚Äì ch·ªâ khi %CP b√™n < ng∆∞·ª°ng
        bonus_opt_bio = (0.25 * (elig_threshold - bio_ratio) * bio_rev_vnd) if (bio_rev_vnd and bio_ratio < elig_threshold) else 0.0
        bonus_opt_bpo = (0.25 * (elig_threshold - bpo_ratio) * bpo_rev_vnd) if (bpo_rev_vnd and bpo_ratio < elig_threshold) else 0.0

        total_bonus = round(bonus_sales_bio + bonus_sales_bpo + bonus_opt_bio + bonus_opt_bpo)

        results.append({
            "T√™n": name or "Ng∆∞·ªùi",
            "DT BIO (VND)": round(bio_rev_vnd),
            "CP BIO (VND)": round(bio_cost_vnd),
            "%CP BIO": f"{bio_ratio*100:.2f}%",
            "DT BPO (VND)": round(bpo_rev_vnd),
            "CP BPO (VND)": round(bpo_cost_vnd),
            "%CP BPO": f"{bpo_ratio*100:.2f}%",
            "DT T·ªïng (VND)": round(total_rev),
            "M·ªëc % theo DT T·ªïng": f"{total_rate*100:.2f}%",
            "Factor BIO": bio_factor,
            "Factor BPO": bpo_factor,
            "Th∆∞·ªüng DS BIO (VND)": round(bonus_sales_bio),
            "Th∆∞·ªüng DS BPO (VND)": round(bonus_sales_bpo),
            "Th∆∞·ªüng t·ªëi ∆∞u BIO (VND)": round(bonus_opt_bio),
            "Th∆∞·ªüng t·ªëi ∆∞u BPO (VND)": round(bonus_opt_bpo),
            "T·ªîNG TH∆Ø·ªûNG (VND)": total_bonus
        })

    if not results:
        st.warning("Ch∆∞a c√≥ d√≤ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 ng∆∞·ªùi.")
    else:
        out = pd.DataFrame(results)

        # B·∫£ng hi·ªÉn th·ªã ƒë·∫πp (ƒë·ªãnh d·∫°ng VND)
        pretty = out.copy()
        for col in [
            "DT BIO (VND)","CP BIO (VND)","DT BPO (VND)","CP BPO (VND)",
            "DT T·ªïng (VND)","Th∆∞·ªüng DS BIO (VND)","Th∆∞·ªüng DS BPO (VND)",
            "Th∆∞·ªüng t·ªëi ∆∞u BIO (VND)","Th∆∞·ªüng t·ªëi ∆∞u BPO (VND)","T·ªîNG TH∆Ø·ªûNG (VND)"
        ]:
            pretty[col] = pretty[col].map(fmt_vnd)

        st.success("‚úÖ ƒê√£ t√≠nh xong")
        st.dataframe(pretty, use_container_width=True)

        # CSV raw s·ªë (kh√¥ng format) ƒë·ªÉ t·∫£i v·ªÅ
        st.download_button("üì• T·∫£i CSV (raw s·ªë)", out.to_csv(index=False).encode("utf-8"),
                           "ket_qua_tinh_thuong.csv", "text/csv")
else:
    st.info("Nh·∫≠p s·ªë li·ªáu v√† b·∫•m **T√çNH TH∆Ø·ªûNG**")

st.caption("¬© App t√≠nh th∆∞·ªüng BIO/BPO ‚Äì chi ph√≠ lu√¥n VND, doanh thu c√≥ th·ªÉ nh·∫≠p RM ƒë·ªÉ t·ª± nh√¢n t·ªâ gi√°.")
